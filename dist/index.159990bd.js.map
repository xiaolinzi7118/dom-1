{"mappings":"AAAAA,OAAOC,IAAAA,CAEHC,OAAAA,SAAOC,SACGC,EAAYC,SAASC,cAAc,mBACzCF,EAAUG,UAAYJ,EAAOK,OACtBJ,EAAUK,QAAQC,YAE7BC,MAAAA,SAAMC,EAAMC,GACRD,EAAKE,WAAWC,aAAaF,EAAOD,EAAKI,cAE7CC,OAAAA,SAAOL,EAAMC,GACTD,EAAKE,WAAWC,aAAaH,EAAMC,IAEvCK,OAAAA,SAAOC,EAAQP,GACXO,EAAOC,YAAYR,IAEvBS,KAAAA,SAAKT,EAAMO,GAEPlB,IAAIgB,OAAOL,EAAMO,GAEjBlB,IAAIiB,OAAOC,EAAQP,IAGvBU,OAAAA,SAAOV,UACHA,EAAKE,WAAWS,YAAYX,GACrBA,GAEXY,MAAAA,SAAMZ,SAGIa,EAAAA,OAMFC,EAAId,EAAKF,gBACNgB,GACHD,EAAME,KAAK1B,IAAIqB,OAAOI,IACtBA,EAAId,EAAKF,kBAENe,GAGXG,KAAAA,SAAKhB,EAAMiB,EAAMC,MACY,IAArBC,UAAUC,OACVpB,EAAKqB,aAAaJ,EAAMC,WACI,IAArBC,UAAUC,cACVpB,EAAKsB,aAAaL,IAGjCM,KAAAA,SAAKvB,EAAMT,GACH,cAAeS,EACfA,EAAKwB,UAAYjC,EAEjBS,EAAKyB,YAAclC,GAG3BmC,KAAAA,SAAK1B,EAAMT,MACkB,IAArB4B,UAAUC,cAGHpB,EAAKL,UAFZK,EAAKL,UAAYJ,GAKzBoC,MAAAA,SAAM3B,EAAMiB,EAAMC,MACW,IAArBC,UAAUC,OAEVpB,EAAK2B,MAAMV,GAAQC,UACS,IAArBC,UAAUC,OAAW,IACR,iBAATH,SAEAjB,EAAK2B,MAAMV,MACXA,aAAgBW,OAAAA,OAEjBC,EAASZ,UACNa,KAAOD,EACZ7B,EAAK2B,MAAMG,GAAOD,EAAOC,MAKzCC,MAAAA,CACIC,IAAAA,SAAIhC,EAAMiC,GACNjC,EAAKkC,UAAUF,IAAIC,IAEvBvB,OAAAA,SAAOV,EAAMiC,GACTjC,EAAKkC,UAAUxB,OAAOuB,IAE1BE,IAAAA,SAAInC,EAAMiC,UACCjC,EAAKkC,UAAUE,SAASH,KAGvCI,GAAAA,SAAGrC,EAAMsC,EAAWC,GAChBvC,EAAKwC,iBAAiBF,EAAWC,IAErCE,IAAAA,SAAIzC,EAAMsC,EAAWC,GACjBvC,EAAK0C,oBAAoBJ,EAAWC,IAGxCI,KAAAA,SAAKC,EAAUC,UAEHA,GAASpD,UAAUqD,iBAAiBF,IAEhDrC,OAAAA,SAAOP,UACIA,EAAKE,YAEhB6C,SAAAA,SAAS/C,UACEA,EAAK+C,UAEhBC,SAAAA,SAAShD,UACEiD,MAAMC,KAAKlD,EAAKE,WAAW6C,UAC7BI,QAAOC,GAAKA,IAAMpD,KAE3BqD,KAAAA,SAAKrD,OACGc,EAAId,EAAKI,iBACNU,GAAoB,IAAfA,EAAEwC,UACVxC,EAAIA,EAAEV,mBAEHU,GAEXyC,SAAAA,SAASvD,OACDc,EAAId,EAAKwD,qBACN1C,GAAoB,IAAfA,EAAEwC,UACVxC,EAAIA,EAAE0C,uBAEH1C,GAEX2C,KAAAA,SAAKC,EAAUnB,WACFoB,EAAI,EAAGA,EAAID,EAAStC,OAAQuC,IACjCpB,EAAGqB,KAAK,KAAMF,EAASC,KAG/BE,MAAAA,SAAM7D,SACI8D,EAAOzE,IAAI0D,SAAS/C,EAAKE,gBAC3ByD,MACCA,EAAI,EAAGA,EAAIG,EAAK1C,QACb0C,EAAKH,KAAO3D,EADS2D,YAKtBA","sources":["./src/dom.js"],"sourcesContent":["window.dom = {\r\n    //增\r\n    create(string) {\r\n        const container = document.createElement(\"template\");\r\n        container.innerHTML = string.trim();//去除空格\r\n        return container.content.firstChild\r\n    },\r\n    after(node, node2) {\r\n        node.parentNode.insertBefore(node2, node.nextSibling);\r\n    },\r\n    before(node, node2) {\r\n        node.parentNode.insertBefore(node, node2);\r\n    },\r\n    append(parent, node) {\r\n        parent.appendChild(node);\r\n    },\r\n    wrap(node, parent) {\r\n        //先把parent加到node的前面或者后面\r\n        dom.before(node, parent);\r\n        //再把node移到parent里面\r\n        dom.append(parent, node);\r\n    },\r\n    //删\r\n    remove(node) {\r\n        node.parentNode.removeChild(node);\r\n        return node\r\n    },\r\n    empty(node) {\r\n        // const { childNodes } = node;\r\n        //等于const childNodes=node.childNodes\r\n        const array = [];\r\n        // for (let i = 0; i < childNodes.length; i++) {\r\n        //     dom.remove(childNodes[i]);\r\n        //     array.push(childNodes[i]);\r\n        // }\r\n        //for循环不可以，因为length长度实时在变化\r\n        let x = node.firstChild;\r\n        while (x) {\r\n            array.push(dom.remove(x));\r\n            x = node.firstChild;\r\n        }\r\n        return array\r\n    },\r\n    //改\r\n    attr(node, name, value) {//重载\r\n        if (arguments.length === 3) {\r\n            node.setAttribute(name, value);\r\n        } else if (arguments.length === 2) {\r\n            return node.getAttribute(name)\r\n        }\r\n    },\r\n    text(node, string) {//适配\r\n        if ('innerText' in node) {\r\n            node.innerText = string;\r\n        } else {\r\n            node.textContent = string;\r\n        }\r\n    },\r\n    html(node, string) {\r\n        if (arguments.length === 2) {\r\n            node.innerHTML = string;\r\n        } else {\r\n            return node.innerHTML\r\n        }\r\n    },\r\n    style(node, name, value) {\r\n        if (arguments.length === 3) {\r\n            //dom.style(div,'color','red')\r\n            node.style[name] = value;\r\n        } else if (arguments.length === 2) {\r\n            if (typeof name === 'string') {\r\n                //dom.style(div,'color')\r\n                return node.style[name]\r\n            } else if (name instanceof Object) {\r\n                //dom.style(div,{color:'red'})\r\n                const object = name;\r\n                for (let key in object) {\r\n                    node.style[key] = object[key];\r\n                }\r\n            }\r\n        }\r\n    },\r\n    class: {\r\n        add(node, className) {\r\n            node.classList.add(className);\r\n        },\r\n        remove(node, className) {\r\n            node.classList.remove(className);\r\n        },\r\n        has(node, className) {\r\n            return node.classList.contains(className);\r\n        }\r\n    },\r\n    on(node, eventName, fn) {\r\n        node.addEventListener(eventName, fn)\r\n    },\r\n    off(node, eventName, fn) {\r\n        node.removeEventListener(eventName, fn)\r\n    },\r\n    //查\r\n    find(selector, scope) {\r\n        //找scope下的还是全局的\r\n        return (scope || document).querySelectorAll(selector)\r\n    },\r\n    parent(node) {\r\n        return node.parentNode\r\n    },\r\n    children(node) {\r\n        return node.children\r\n    },\r\n    siblings(node) {\r\n        return Array.from(node.parentNode.children)\r\n            .filter(n => n !== node)\r\n    },\r\n    next(node) {\r\n        let x = node.nextSibling\r\n        while (x && x.nodeType === 3) {\r\n            x = x.nextSibling\r\n        }\r\n        return x\r\n    },\r\n    previous(node) {\r\n        let x = node.previousSibling\r\n        while (x && x.nodeType === 3) {\r\n            x = x.previousSibling\r\n        }\r\n        return x\r\n    },\r\n    each(nodeList, fn) {\r\n        for (let i = 0; i < nodeList.length; i++) {\r\n            fn.call(null, nodeList[i])\r\n        }\r\n    },\r\n    index(node) {\r\n        const list = dom.children(node.parentNode)\r\n        let i\r\n        for (i = 0; i < list.length; i++) {\r\n            if (list[i] === node) {\r\n                break\r\n            }\r\n        }\r\n        return i\r\n    }\r\n}"],"names":["window","dom","create","string","container","document","createElement","innerHTML","trim","content","firstChild","after","node","node2","parentNode","insertBefore","nextSibling","before","append","parent","appendChild","wrap","remove","removeChild","empty","array","x","push","attr","name","value","arguments","length","setAttribute","getAttribute","text","innerText","textContent","html","style","Object","object","key","class","add","className","classList","has","contains","on","eventName","fn","addEventListener","off","removeEventListener","find","selector","scope","querySelectorAll","children","siblings","Array","from","filter","n","next","nodeType","previous","previousSibling","each","nodeList","i","call","index","list"],"version":3,"file":"index.159990bd.js.map"}